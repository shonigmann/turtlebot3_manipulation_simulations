<?xml version="1.0"?>
<!-- TurtleBot3 Manipulation -->
<robot xmlns:xacro="http://ros.org/wiki/xacro">

  <!--  if gazebo=True, enable SDF specific tags  -->
  <xacro:arg name="gazebo" default="True"/>
  <xacro:arg name="offroad_turtlebot" default="False"/>
  <xacro:arg name="scale_factor" default="1.0"/>
  <xacro:property name="sf" value="$(arg scale_factor)"/>
  <xacro:arg name="flashlight" default="False"/>

  <xacro:if value="$(arg gazebo)">
    <gazebo reference="base_link">
      <material>Gazebo/DarkGrey</material>
<!--      <kp>10000.0</kp>--> <!-- for whatever reason setting kp and kd causes issues with the laser scan -->
<!--      <kd>1000.0</kd>-->
      <mu1>1.5</mu1>
      <mu2>1.5</mu2>
      <minDepth>0.002</minDepth>
      <maxVel>10.0</maxVel>
    </gazebo>
    <gazebo reference="wheel_right_link">
      <material>Gazebo/FlatBlack</material>
<!--      <kp>10000.0</kp>-->
<!--      <kd>1000.0</kd>-->
      <mu1>1.5</mu1>
      <mu2>1.5</mu2>
      <minDepth>0.002</minDepth>
      <maxVel>10.0</maxVel>
    </gazebo>
    <gazebo reference="wheel_left_link">
      <material>Gazebo/FlatBlack</material>
<!--      <kp>10000.0</kp>-->
<!--      <kd>1000.0</kd>-->
      <mu1>1.5</mu1>
      <mu2>1.5</mu2>
      <minDepth>0.002</minDepth>
      <maxVel>10.0</maxVel>
    </gazebo>
    <gazebo reference="base_scan">
      <material>Gazebo/FlatBlack</material>
      <sensor name="hls_lfcd_lds" type="ray">
        <always_on>true</always_on>
        <visualize>false</visualize>
        <pose>0 0 0 0 0 0</pose>
<!--        <pose>-1.064 0 0.121 0 0 0</pose>-->
        <update_rate>5</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>300</samples>
              <resolution>1.000000</resolution>
              <min_angle>-2.617993</min_angle>
              <max_angle>2.617993</max_angle>
<!--              <min_angle>0.000000</min_angle>-->
<!--              <max_angle>6.283180</max_angle>-->
            </horizontal>
          </scan>
          <range>
            <min>0.120000</min>
            <max>3.5</max>
<!--            originally 0.12 to 3.5-->
            <resolution>0.15000</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="turtlebot3_laserscan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <!-- <namespace>/tb3</namespace> -->
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>base_scan</frame_name>
        </plugin>
      </sensor>
    </gazebo>
    <gazebo reference="camera_rgb_optical_frame">
      <sensor name="camera" type="camera">
        <always_on>true</always_on>
        <visualize>false</visualize>
        <update_rate>30</update_rate>
        <camera name="picam">
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
              <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                  That pixel's noise value is added to each of its color
                  channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
          <plugin name="camera_driver" filename="libgazebo_ros_camera.so">
            <ros>
              <!-- <namespace>test_cam</namespace> -->
              <!-- <remapping>image_raw:=image_demo</remapping> -->
              <!-- <remapping>camera_info:=camera_info_demo</remapping> -->
            </ros>
            <!-- camera_name>omit so it defaults to sensor name</camera_name-->
            <!-- frame_name>omit so it defaults to link name</frameName-->
            <!-- <hack_baseline>0.07</hack_baseline> -->
          </plugin>
      </sensor>
    </gazebo>
    <gazebo reference="imu_link">
      <sensor name="tb3_imu" type="imu">
        <always_on>true</always_on>
        <update_rate>200</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="turtlebot3_imu" filename="libgazebo_ros_imu_sensor.so">
          <ros>
            <!-- <namespace>/tb3</namespace> -->
            <remapping>~/out:=imu</remapping>
          </ros>
        </plugin>
      </sensor>
    </gazebo>

    <gazebo>
      <plugin filename="libgazebo_ros_diff_drive.so" name="turtlebot3_diff_drive">
        <ros>
          <!-- <namespace>/tb3</namespace> -->
        </ros>
        <update_rate>30</update_rate>
        <!-- wheels -->
        <left_joint>wheel_left_joint</left_joint>
        <right_joint>wheel_right_joint</right_joint>

        <!-- kinematics -->

        <xacro:if value="$(arg offroad_turtlebot)">
          <wheel_separation>0.287</wheel_separation>
          <wheel_diameter>${sf*0.066}</wheel_diameter>

          <!-- limits -->
          <max_wheel_torque>${sf*20}</max_wheel_torque>
          <max_wheel_acceleration>1.0</max_wheel_acceleration>
        </xacro:if>

        <xacro:if value="${not $(arg offroad_turtlebot)}">
          <wheel_separation>0.287</wheel_separation>
          <wheel_diameter>0.066</wheel_diameter>

          <!-- limits -->
          <max_wheel_torque>20</max_wheel_torque>
          <max_wheel_acceleration>1.0</max_wheel_acceleration>
        </xacro:if>

        <command_topic>cmd_vel</command_topic>
        <!-- output -->
        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
        <publish_wheel_tf>false</publish_wheel_tf>

        <odometry_topic>odom</odometry_topic>
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_footprint</robot_base_frame>
      </plugin>
    </gazebo>

    <gazebo>
      <plugin filename="libgazebo_ros_joint_state_publisher.so" name="turtlebot3_joint_state">
        <ros>
          <!-- <namespace>/tb3</namespace> -->
          <remapping>~/out:=joint_states</remapping>
        </ros>
        <update_rate>30</update_rate>
        <joint_name>wheel_left_joint</joint_name>
        <joint_name>wheel_right_joint</joint_name>
      </plugin>
    </gazebo>


    <xacro:if value="$(arg flashlight)">
      <!--    create links to attack flashlights to-->
      <link name="flashlight_1"/>
      <link name="flashlight_2"/>

      <joint name="flashlight_joint_1" type="fixed">
        <parent link="base_link"/>
        <child link="flashlight_1"/>
        <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      </joint>
      <joint name="flashlight_joint_2" type="fixed">
        <parent link="base_link"/>
        <child link="flashlight_2"/>
        <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      </joint>

      <gazebo reference="flashlight_1">
        <light name="light_1" type="spot">
          <visualize>0</visualize>
          <cast_shadows>1</cast_shadows>
          <intensity>1</intensity>
          <diffuse>1 1 1 1</diffuse>
          <specular>.5 .5 .5 1 </specular>
          <attenuation>
            <range>20</range>
            <linear>1</linear>
            <constant>1</constant>
            <quadratic>0</quadratic>
          </attenuation>
          <direction>0 0 -1</direction>
          <spot>
            <inner_angle>0.8</inner_angle>
            <outer_angle>0.8</outer_angle>
            <falloff>1</falloff>
          </spot>
          <pose>0 -0.1 0.125 0 -1.5 -0.2</pose>
        </light>
        <plugin name='light_control' filename='libFlashLightPlugin.so'>
          <enable>true</enable>
          <light>
            <id>flashlight_1/light_1</id>
            <color>1 1 1</color>
            <duration>1</duration>
            <interval>0.5</interval>
          </light>
        </plugin>
      </gazebo>
      <gazebo reference="flashlight_2">
        <light name="light_2" type="spot">
          <visualize>0</visualize>
          <cast_shadows>1</cast_shadows>
          <intensity>1</intensity>
          <diffuse>1 1 1 1</diffuse>
          <specular>.5 .5 .5 1 </specular>
          <attenuation>
            <range>20</range>
            <linear>1</linear>
            <constant>1</constant>
            <quadratic>0</quadratic>
          </attenuation>
          <direction>0 0 -1</direction>
          <spot>
            <inner_angle>0.8</inner_angle>
            <outer_angle>0.8</outer_angle>
            <falloff>1</falloff>
          </spot>
          <pose>0 0.1 0.125 0.0 -1.5 0.2</pose>
        </light>
        <plugin name='light_control' filename='libFlashLightPlugin.so'>
          <enable>true</enable>
          <light>
            <id>flashlight_2/light_2</id>
            <color>1 1 1</color>
            <duration>1</duration>
            <interval>0.5</interval>
          </light>
        </plugin>
      </gazebo>
    </xacro:if>
  </xacro:if>
</robot>
